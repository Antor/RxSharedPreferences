apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'digital.wup.android-maven-publish'
apply plugin: 'com.jfrog.bintray'

android {
    compileSdkVersion versions.compileSdk

    defaultConfig {
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk

        versionCode packaging.versionCode
        versionName packaging.versionName

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

}

dependencies {
    implementation libraries.rxjava
    implementation libraries.supportAnnotations
}

bintray {
    user = hasProperty('bintray_user') ? bintray_user : ''
    key = hasProperty('bintray_api_key') ? bintray_api_key : ''

    publications = ['library']

    publish = true

    pkg {
        repo = packaging.bintrayRepo
        name = packaging.name
        desc = packaging.description
        licenses = [packaging.bintrayLicense]
        websiteUrl = packaging.websiteUrl
        issueTrackerUrl = packaging.issueTrackerUrl
        vcsUrl = packaging.vcsUrl

        githubRepo = packaging.githubRepo

        version {
            name = packaging.versionName
            desc = packaging.versionDescription

            vcsTag = packaging.vcsTag
        }
    }
}

publishing {
    publications {
        library(MavenPublication) {
            from components.androidRelease

            artifact javadocsJar
            artifact sourcesJar

            groupId packaging.groupId
            artifactId packaging.artifactId
            version packaging.versionName

            pom {
                name = rootProject.ext.packaging.name
                description = rootProject.ext.packaging.description

                licenses {
                    license {
                        name = rootProject.ext.packaging.pomLicenseName
                        url = rootProject.ext.packaging.pomLicenseUrl
                    }
                }

                developers {
                    developer {
                        name = rootProject.ext.packaging.developerName
                        email = rootProject.ext.packaging.developerEmail
                    }
                }
            }
        }
    }
}

task javadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            owner.classpath += variant.javaCompile.classpath
        }
    }
    exclude '**/R.html', '**/R.*.html', '**/index.html'
}

task javadocsJar(type: Jar, dependsOn: javadocs) {
    classifier = 'javadoc'
    from javadocs.destinationDir
}

task sourcesJar(type: Jar) {
    classifier "sources"
    from android.sourceSets.main.java.srcDirs
}
